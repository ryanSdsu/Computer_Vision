from random import *
import numpy as np

#Q1.2
#random permutations, shuffle the array
testList = [1,2,3,4,5,6,7,8,9,10]
shuffle(testList)
print(testList)

#Splice the array forward
testListTwo = [1,2,3,4,5,6,7,8,9,10]
testListSpliceByThree = testListTwo[0:11:3]
print(testListSpliceByThree)

#Find all the elements that are above 6
testListTwo = [1,2,3,4,5,6,7,8,9,10]
testListGreaterThanSix = [i for i in testListTwo if i > 6]
print(testListGreaterThanSix)

#Change all the values to 22 in a list
testListOneValues = np.empty(10)
testListOneValues.fill(1)
testListOneValues = list(map(int,testListOneValues))
testListOneValues = [i*22 for i in testListOneValues]

#Sum of the list
testListThree = [1,2,3,4,5,6,7,8,9,10]
sumOfListThree = sum(testListThree)
print(sumOfListThree)

#Splice the array backwards
testListFour = [1,2,3,4,5,6,7,8,9,10]
testListSpliceDecrement = testListFour[len(testListFour) :  : -1]
print(testListSpliceDecrement)


#Q3
#For part a, read in the image, grab all of the intensities in a 100X100 array (the intensities are between 0-255),
#from there place them in a one dimensional array, sort them in ascending order, and then plot them

#Part A
import numpy
import matplotlib.pyplot as plt
import random
import cv2

im = cv2.imread('/Users/RJ/PycharmProjects/Computer_Vision/Homework_One/test.png',0)
im = cv2.resize(im, (100,100))
im_reshape = numpy.reshape(im, (1,100*100))
im_sorted = numpy.sort(im_reshape[0])
plt.plot(im_sorted)
plt.show()

#Part B
plt.hist(im_sorted, bins=32)
plt.show()

#Part C
thres = 123
print( im )
plt.imshow(im, cmap='gray')
plt.show()

im_binary = numpy.array(im, copy=True)
for i in range(len(im[0])):
    for j in range(len(im)):
        if im[i][j] > thres:
            im_binary[i][j] = 255
        else:
            im_binary[i][j] = 0

plt.imshow(im_binary, cmap='gray')
plt.show()

#Part D
mean_A = numpy.mean(im_reshape)
print(mean_A)
im_mean = im-mean_A
print(im_mean)
for i in range(len(im_mean[0])):
    for j in range(len(im_mean)):
        if im_mean[i][j] < 0:
            im_mean[i][j] = 0

plt.imshow(im_mean, cmap='gray')
plt.show()

#Part E
die_side = range(1,7)
roll = random.choice(die_side)
print(roll)

#Part F
y = range(1,7)
z = map(list, zip(*[iter(y)]*3))
print(list(z))

#Part G
temp_min = 9999
row = 0
col = 0
for i in range(len(im)):
    for j in range(len(im[0])):
        if im[i][j] < temp_min:
            temp_min = im[i][j]
            row = i
            col = j

print("min value: {} at {},{}".format(temp_min,row,col))

#Part H
v = [1, 8 ,8 ,2, 1, 3, 9, 8]
v = set(v)
print(v)

#Part 2
"""
Go through the directory and get each of the images. 
Loop through them and maintain the averages via the RBG and the Grayscale compounding on top of each other. 
Store them globally and then output the avg of all the images once all the images have been reviewed. 
Do this for both the grayscale and the RGB. 

Tip: Use the looping over the directory from Kyles class to work this one out
"""
# Color picture
#This opens and gets the image to show
im2 = cv2.imread('/Users/RJ/PycharmProjects/Computer_Vision/Homework_One/im01.jpg')
im2 = cv2.cvtColor(im2, cv2.COLOR_BGR2RGB)
plt.imshow(im2)
plt.show()

#This resizes the image
im2 = cv2.resize(im2, (100,100))
plt.imshow(im2)
plt.show()

#This gets the RGB which needs to be stored globally in three separete variables
#They need to be compounded via their avg and the number of frames
print(im2.shape)
R = im2[:,:,0]
G = im2[:,:,1]
B = im2[:,:,2]
print(R.shape)
print(G.shape)
print(B.shape)

#Code to take the average of R, G, and B
#insert code here

#Once the code is written, here we merge the avgs of all 3 (RBG) together to make one picture
im3 = cv2.merge((R,G,B))
print(im3.shape)

#Print the picture
plt.imshow(im2)
plt.show()